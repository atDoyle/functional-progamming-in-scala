[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(/home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/example/Hello.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/Main.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(/home/andrew/git-repos/functional-progamming-in-scala/chapter5/src/main/scala/example/Hello.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter5/src/main/scala/Main.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(/home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Some$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/example/AnotherModule.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Left$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/example/AnotherModule$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Right$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/None.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Left.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Some.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Option.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Option$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Right.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Either$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/None$.class, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/target/scala-2.13/classes/fpinscala/errorhandling/Either.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(fpinscala.errorhandling.Left, fpinscala.errorhandling.Either, fpinscala.errorhandling.None, example.AnotherModule, fpinscala.errorhandling.Right, fpinscala.errorhandling.Some, fpinscala.errorhandling.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(/home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/Main.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/example/Hello.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(fpinscala.errorhandling.Left, fpinscala.errorhandling.Either, fpinscala.errorhandling.None, example.AnotherModule, fpinscala.errorhandling.Right, fpinscala.errorhandling.Some, fpinscala.errorhandling.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(/home/andrew/git-repos/functional-progamming-in-scala/chapter5/src/main/scala/example/Hello.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter5/src/main/scala/Main.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/Main.scala, /home/andrew/git-repos/functional-progamming-in-scala/chapter4/src/main/scala/example/Hello.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Left, fpinscala.errorhandling.Either, fpinscala.errorhandling.None, example.AnotherModule, fpinscala.errorhandling.Right, fpinscala.errorhandling.Some, fpinscala.errorhandling.Option[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding fpinscala.errorhandling.Right by fpinscala.errorhandling.Either[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all sources: number of invalidated sources > 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 2 Scala sources to /home/andrew/git-repos/functional-progamming-in-scala/chapter5/target/scala-2.13/classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.1:compile for Scala 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.13:1.3.1:compile for Scala 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 1b7a8c81 for Scala compiler version 2.13.1[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/andrew/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.1/scala-library-2.13.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	/home/andrew/git-repos/functional-progamming-in-scala/chapter5/target/scala-2.13/classes:/home/andrew/.cache/coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-parser-combinators_2.13/1.1.2/scala-parser-combinators_2.13-1.1.2.jar:/home/andrew/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-kernel_2.13/2.0.0/cats-kernel_2.13-2.0.0.jar:/home/andrew/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-macros_2.13/2.0.0/cats-macros_2.13-2.0.0.jar:/home/andrew/.cache/coursier/v1/https/repo1.maven.org/maven2/org/typelevel/cats-core_2.13/2.0.0/cats-core_2.13-2.0.0.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 4.567252502 s[0m
[0m[[0m[0mdebug[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.Right...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Right[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.Right,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(fpinscala;errorhandling;Right;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(Right,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(get,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.Right has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(fpinscala;errorhandling;Right;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(Right,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(get,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.Right)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.None...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.None[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.None)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.None,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName(filter_1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(None,[Default]), UsedName(orElse_1,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.None has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName(filter_1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(None,[Default]), UsedName(orElse_1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.None)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.Left...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Left[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.Left,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(fpinscala;errorhandling;Left;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Left,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(get,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.Left has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(fpinscala;errorhandling;Left;init;,[Default]), UsedName(copy$default$1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Left,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(get,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.Left)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.laziness.Empty...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.laziness.Empty[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.laziness.Empty)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.laziness.Empty,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(Empty,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName(foldRight,[Default]), UsedName(takeWhile,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(startsWith,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The fpinscala.laziness.Empty has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(Empty,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(canEqual,[Default]), UsedName(foldRight,[Default]), UsedName(takeWhile,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(startsWith,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.laziness.Empty)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.Either...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Either[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.Either,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(mean,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(Either,[Default]), UsedName(Try,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(traverse_1,[Default]), UsedName(eq,[Default]), UsedName(traverse,[Default]), UsedName(safeDiv,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(sequence,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.Either has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(map,[Default]), UsedName(mean,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(Either,[Default]), UsedName(Try,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(traverse_1,[Default]), UsedName(eq,[Default]), UsedName(traverse,[Default]), UsedName(safeDiv,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(sequence,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.Either)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.laziness.Stream...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.laziness.Stream[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding fpinscala.laziness.Empty by fpinscala.laziness.Stream[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding fpinscala.laziness.Cons by fpinscala.laziness.Stream[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.laziness.Cons, fpinscala.laziness.Empty, fpinscala.laziness.Stream)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.laziness.Stream,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(!=,[Default]), UsedName(cons,[Default]), UsedName(empty,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(unfoldViaFold,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ones,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(fibsViaUnfold,[Default]), UsedName(flatMap,[Default]), UsedName(constantViaUnfold,[Default]), UsedName(foldRight,[Default]), UsedName(takeWhile,[Default]), UsedName(onesViaUnfold,[Default]), UsedName(##,[Default]), UsedName(constant,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName($isInstanceOf,[Default]), UsedName(fibs,[Default]), UsedName(Stream,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(unfoldViaMap,[Default]), UsedName(asInstanceOf,[Default]), UsedName(fromViaUnfold,[Default]), UsedName(startsWith,[Default]), UsedName(from,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(unfold,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]))) invalidates 3 classes due to The fpinscala.laziness.Stream has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(!=,[Default]), UsedName(cons,[Default]), UsedName(empty,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(unfoldViaFold,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(ones,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(fibsViaUnfold,[Default]), UsedName(flatMap,[Default]), UsedName(constantViaUnfold,[Default]), UsedName(foldRight,[Default]), UsedName(takeWhile,[Default]), UsedName(onesViaUnfold,[Default]), UsedName(##,[Default]), UsedName(constant,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName($isInstanceOf,[Default]), UsedName(fibs,[Default]), UsedName(Stream,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(unfoldViaMap,[Default]), UsedName(asInstanceOf,[Default]), UsedName(fromViaUnfold,[Default]), UsedName(startsWith,[Default]), UsedName(from,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(unfold,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.laziness.Cons, fpinscala.laziness.Empty, fpinscala.laziness.Stream)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.Some...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Some[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.Some,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(fpinscala;errorhandling;Some;init;,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$1,[Default]), UsedName(filter_1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(orElse_1,[Default]), UsedName(get,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.Some has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(Some,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(fpinscala;errorhandling;Some;init;,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(canEqual,[Default]), UsedName(copy$default$1,[Default]), UsedName(filter_1,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(orElse,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(eq,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(productElement,[Default]), UsedName(orElse_1,[Default]), UsedName(get,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.Some)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.errorhandling.Option...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.errorhandling.Option[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.errorhandling.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.errorhandling.Option,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(sequence_1,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(mean,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(variance,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(filter_1,[Default]), UsedName(failingFn,[Default]), UsedName(sequenceViaTraverse,[Default]), UsedName(##,[Default]), UsedName(failingFn2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(traverse_1,[Default]), UsedName(Option,[Default]), UsedName(eq,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(sequence,[Default]), UsedName(orElse_1,[Default]))) invalidates 1 classes due to The fpinscala.errorhandling.Option has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(filter,[Default]), UsedName(sequence_1,[Default]), UsedName(map2,[Default]), UsedName(!=,[Default]), UsedName(flatMap_1,[Default]), UsedName(map,[Default]), UsedName(mean,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(variance,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(filter_1,[Default]), UsedName(failingFn,[Default]), UsedName(sequenceViaTraverse,[Default]), UsedName(##,[Default]), UsedName(failingFn2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(orElse,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(getOrElse,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(traverse_1,[Default]), UsedName(Option,[Default]), UsedName(eq,[Default]), UsedName(traverse,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(sequence,[Default]), UsedName(orElse_1,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.errorhandling.Option)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from fpinscala.laziness.Cons...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: fpinscala.laziness.Cons[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(fpinscala.laziness.Cons)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(fpinscala.laziness.Cons,ModifiedNames(changes = UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(t,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(fpinscala;laziness;Cons;init;,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(h,[Default]), UsedName(canEqual,[Default]), UsedName(foldRight,[Default]), UsedName(copy$default$1,[Default]), UsedName(takeWhile,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$2,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Cons,[Default]), UsedName(startsWith,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]), UsedName(productElement,[Default]))) invalidates 1 classes due to The fpinscala.laziness.Cons has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName($init$,[Default]), UsedName(takeWhileViaUnfold,[Default]), UsedName(hasSubsequence,[Default]), UsedName(filter,[Default]), UsedName(scanRight,[Default]), UsedName(exists,[Default]), UsedName(!=,[Default]), UsedName(productArity,[Default]), UsedName(zip,[Default]), UsedName(map,[Default]), UsedName(t,[Default]), UsedName(toListFast,[Default]), UsedName(toList,[Default]), UsedName(headOption,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(unapply,[Default]), UsedName(fpinscala;laziness;Cons;init;,[Default]), UsedName(zipWith,[Default]), UsedName(ne,[Default]), UsedName(equals,[Default]), UsedName(flatMap,[Default]), UsedName(productIterator,[Default]), UsedName(copy,[Default]), UsedName(h,[Default]), UsedName(canEqual,[Default]), UsedName(foldRight,[Default]), UsedName(copy$default$1,[Default]), UsedName(takeWhile,[Default]), UsedName(##,[Default]), UsedName($asInstanceOf,[Default]), UsedName(tails,[Default]), UsedName(zipAll,[Default]), UsedName(notifyAll,[Default]), UsedName(apply,[Default]), UsedName(productPrefix,[Default]), UsedName($isInstanceOf,[Default]), UsedName(notify,[Default]), UsedName(getClass,[Default]), UsedName(clone,[Default]), UsedName(productElementName,[Default]), UsedName(copy$default$2,[Default]), UsedName(forAll,[Default]), UsedName(zipWithAll,[Default]), UsedName(takeViaUnfold,[Default]), UsedName(wait,[Default]), UsedName(asInstanceOf,[Default]), UsedName(Cons,[Default]), UsedName(startsWith,[Default]), UsedName(isInstanceOf,[Default]), UsedName(synchronized,[Default]), UsedName(mapViaUnfold,[Default]), UsedName(toListRecursive,[Default]), UsedName(take,[Default]), UsedName(eq,[Default]), UsedName(drop,[Default]), UsedName(find,[Default]), UsedName(productElementNames,[Default]), UsedName(hashCode,[Default]), UsedName(finalize,[Default]), UsedName(takeWhile_1,[Default]), UsedName(append,[Default]), UsedName(productElement,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(fpinscala.laziness.Cons)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: [0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mNo classes were invalidated.[0m
